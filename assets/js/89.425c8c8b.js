(window.webpackJsonp=window.webpackJsonp||[]).push([[89],{474:function(e,t,a){"use strict";a.r(t);var o=a(11),n=Object(o.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[e._v("I learned that "),a("code",[e._v("grep")]),e._v(' command supports few options called "context" searching. Basically it can print lines around the matching string! For example, you can use this feature to perform a quick Java threads stack analysis like this (assuming you have a java process PID=12345).')]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("bash> jstack 12345 | grep --color 'State: BLOCKED' -B 1\n\"A-Bad-Boy-Thread\" prio=5 tid=0x00007fcfbc895800 nid=0xcd03 waiting on condition [0x00000001657cb000]\n   java.lang.Thread.State: BLOCKED (on object monitor)\n")])])]),a("p",[e._v("See, without the \"-B 1\" option, which show one line before match, you won't know which name of the tread that's acting up! Now isn't that a gem!")]),e._v(" "),a("p",[e._v('You may also use "-A 5" to see 5 more lines after the match. Or you may use the "-C 5" to see 5 lines before and after the match.')]),e._v(" "),a("p",[e._v("PS: There is nothing wrong with a \"BLOCKED\" thread in Java, however if you got one that won't go away, then it's a good indicator that something is fishy about that thread in your application; because in a well designed app, threads should be in BLOCKED state as briefly as possible. Read the javadoc on "),a("code",[e._v("java.lang.Thread.State")]),e._v(" for more details.")])])}),[],!1,null,null,null);t.default=n.exports}}]);