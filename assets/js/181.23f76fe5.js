(window.webpackJsonp=window.webpackJsonp||[]).push([[181],{568:function(n,e,t){"use strict";t.r(e);var a=t(11),s=Object(a.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("p",[n._v('If you work with plain Java JDBC without any external libraries, you will need to manage your own SQL statements. Unfortunately Java String does not support muti-lines construct, and you have to use many "quotes" + "concatenation" and makes the SQL very hard to read and manage. This makes it hard to maintain and test (try to copy a SQL from Java code into your SQL client). It would be so nice to keep the entire SQL block of text intact without these Java noise.')]),n._v(" "),t("p",[n._v("Here is a solution. Store your SQL queries in XML inside CDATA:")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('<?xml version="1.0" encoding="UTF-8" standalone="yes"?>\n<sqlMap>\n    <sqls>\n        <entry>\n            <key>getUser</key>\n            <value><![CDATA[\nSELECT *\nFROM USERS\nWHERE ID = ?\n            ]]></value>\n        </entry>\n        <entry>\n            <key>getSpecialCodeByUserId</key>\n            <value><![CDATA[\nSELECT u.EMAIL, p.ID as PROFILEID, p.SPECIALCODE, a.MANAGERID\nFROM USERS u\n  LEFT JOIN PROFILE p ON p.USERID = u.ID\n  LEFT JOIN ACCOUNT a ON a.PROFILEID = p.ID\nWHERE u.ID = ?  ]]></value>\n        </entry>  </sqls>\n</sqlMap>\n')])])]),t("p",[n._v("Now you just need to read it. One way to do this is with built-in JAXB")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("import javax.xml.bind.annotation.XmlRootElement;\nimport java.util.HashMap;\nimport java.util.Map;\n\n@XmlRootElement\npublic class SqlMap {\n    Map<String, String> sqls = new HashMap<>();\n\n    public Map<String, String> getSqls() {\n        return sqls;\n    }\n\n    public void setSqls(Map<String, String> sqls) {\n        this.sqls = sqls;\n    }\n\n    public String getSql(String name) {\n        return sqls.get(name);\n    }\n\n    public static SqlMap load(String name) throws Exception {\n        InputStream inStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(name);\n        SqlMap sqlMap = JAXB.unmarshal(inStream, SqlMap.class);\n        return sqlMap;\n    }\n}\n")])])]),t("p",[n._v("Another way is to simply use java.util.Properties#loadFromXML by following their schema DTD. Here is an example of XML:")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('<?xml version="1.0" encoding="UTF-8" standalone="no"?>\n<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">\n<properties>\n    <comment>XML Props</comment>\n    \x3c!-- Foo entry --\x3e\n    <entry key="foo">bar</entry>\n    \x3c!-- Query entry --\x3e\n    <entry key="query">\n        <![CDATA[\n                SELECT * FROM USERS\n        ]]>\n    </entry>\n</properties>\n')])])]),t("p",[n._v("Both of these are built-in from your JDK!")])])}),[],!1,null,null,null);e.default=s.exports}}]);