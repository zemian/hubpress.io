(window.webpackJsonp=window.webpackJsonp||[]).push([[134],{520:function(e,t,a){"use strict";a.r(t);var n=a(11),o=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[e._v("Java doesn't have an easy construct of repeat something N number of times. We can make a for loop of course, but many times we don't even care about the variable that we created in the loop. We just want repeat N times of some code and that's it. With the lambda available in Java 8, you may attempt something like this:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('public class RepeatDemo {\n    public static void main(String[] args) {\n        // One liner repeat\n        repeat(10, () -> System.out.println("HELLO"));\n\n        // Multi-liners repeat\n        repeat(10, () -> {\n            System.out.println("HELLO");\n            System.out.println("WORLD");\n        });\n    }\n    \n    static void repeat(int n, Runnable r) {\n        for (int i = 0; i < n; i++)\n            r.run();\n    }\n}\n')])])]),a("p",[e._v("Probably not as eye pleasing or straight forward as the good fashion for-loop, but you do get rid of the unnecessary loop variable. Only if Java 8 would go extra mile and treat the lambda argument in method  with sugar syntax, then we could have it something like the Scala/Groovy style, which makes code more smoother. For example:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v('    // Wouldn\'t this be nice to have in Java?\n    repeat(10) {\n        System.out.println("HELLO");\n        System.out.println("WORLD");\n    }\n')])])]),a("p",[e._v("Hum....")])])}),[],!1,null,null,null);t.default=o.exports}}]);