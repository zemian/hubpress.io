(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{439:function(e,a,n){"use strict";n.r(a);var r=n(11),t=Object(r.a)({},(function(){var e=this,a=e.$createElement,n=e._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("p",[e._v("Have you ever wonder what's the exact version of your "),n("code",[e._v("ojdbc6.jar")]),e._v(" that you have? All the jar files will contain a "),n("code",[e._v("META-INF/MANIFEST.MF")]),e._v(" file, and chances are the version will be in it! You may try using "),n("code",[e._v("$JAVA_HOME/bin/jar -xvf")]),e._v(" to extract the jar and then view the text file. But afterward you would have to clean up the extracted file so not to liter.")]),e._v(" "),n("p",[e._v("However, if you got Groovy, you can print any text file inside a jar without above mess.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v('file = new File(args[0])\nname = args.size() > 1 ? args[1] : "META-INF/MANIFEST.MF"\njar = new java.util.jar.JarFile(file)\nentry = jar.getEntry(name)\nistream = jar.getInputStream(entry)\nprintln(istream.text)\nistream.close()\n')])])]),n("p",[e._v("You may use this script like this:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("$ groovy printjar.groovy /path/to/objdbc6.jar\n\n# Or give an explicit entry name\n$ groovy printjar.groovy $JBOSS_HOME/jboss-modules.jar 'META-INF/maven/org.jboss.modules/jboss-modules/pom.properties'\n")])])]),n("p",[e._v("UPDATES:")]),e._v(" "),n("p",[e._v("Here are different implementations of similar program in differnet JVM based languages.")]),e._v(" "),n("p",[e._v("Java")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('import java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.util.Enumeration;\nimport java.util.jar.JarEntry;\nimport java.util.jar.JarFile;\n\n/**\n * Print text based resource file inside a jar file. (eg: META-INF/MANIFEST.MF)\n * \n * @author Zemian Deng\n */\npublic class printjar {\n    public static void main(String[] args) throws Exception {\n        // Search given name in a jar\n        JarFile jarFile = new JarFile(args[0]);\n        final String searchName = (args.length >= 2) ? args[1]\n                : "META-INF/MANIFEST.MF";\n\n        Enumeration<JarEntry> entries = jarFile.entries();\n        while (entries.hasMoreElements()) {\n            JarEntry entry = entries.nextElement();\n            if (entry.getName().contains(searchName)) {\n                // Print the JarEntry\n                InputStream instream = jarFile.getInputStream(entry);\n                try {\n                    BufferedReader reader = new BufferedReader(\n                            new InputStreamReader(instream));\n                    String line = null;\n                    while ((line = reader.readLine()) != null) {\n                        System.out.println(line);\n                    }\n                } finally {\n                    if (instream != null)\n                        instream.close();\n                }\n            }\n        }\n    }\n}\n')])])]),n("p",[e._v("JavaScript (Run it with "),n("code",[e._v("jrunscript")]),e._v(" command)")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("jar = new java.util.jar.JarFile(arguments[0])\npattern = arguments[arguments.length -1];\nentries = jar.entries();\nwhile(entries.hasMoreElements()) {\n    jarEntry = entries.nextElement();\n    if (jarEntry.toString().search(pattern) != -1) {\n        istream = jar.getInputStream(jarEntry);\n        cat(istream);\n        istream.close();\n        break;\n    }\n}\njar.close();\n")])])]),n("p",[e._v("Kotlin")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('import java.io.BufferedReader\nimport java.io.InputStreamReader\nimport java.util.jar.JarFile\nval jarFile = JarFile(args[0])\nval searchName = if (args.size() >= 2) args[1] else "META-INF/MANIFEST.MF"\nfor (entry in jarFile.entries()) {\n    if (entry.getName().contains(searchName)) {\n        jarFile.getInputStream(entry).use { it ->\n            val reader = BufferedReader(InputStreamReader(it))\n            for (line in reader.lineSequence())\n            println(line)\n        }\n    }\n}\n')])])])])}),[],!1,null,null,null);a.default=t.exports}}]);