(window.webpackJsonp=window.webpackJsonp||[]).push([[84],{469:function(e,a,o){"use strict";o.r(a);var s=o(11),t=Object(s.a)({},(function(){var e=this,a=e.$createElement,o=e._self._c||a;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("p",[e._v("I came a cross some strange Java code and I would like to share it here. Take a look few of classes I have here:")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("    // file: AFoo.java\n    package atest.deng;\n    public abstract class AFoo<T> {\n    }\n    \n    // file: Foo.java\n    package atest.deng;\n    public class Foo extends AFoo<String> {\n    }\n    \n    // file: FooProcessor.java\n    package atest.deng;\n    public class FooProcessor<T> {\n        public void process(Class<AFoo<?>> cls) {\n            System.out.println(cls);\n        }\n    }\n    \n    // file: FooMain.java\n    package atest.deng;\n    public class FooMain {\n        public static void main(String[] args) {\n            new FooProcessor().process(Foo.class);\n        }\n    }\n    \n    bash> mvn compile\n    bash> [INFO] BUILD SUCCESS\n")])])]),o("p",[e._v("I tried this with JDK6 + Maven and it compiles without problem. But try to remove the "),o("code",[e._v("<T>")]),e._v(" part from "),o("code",[e._v("FooProcessor")]),e._v(" and it will fail to compile!")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("    // file: FooProcessor.java\n    package atest.deng;\n    public class FooProcessor {\n        public void process(Class<AFoo<?>> cls) {\n            System.out.println(cls);\n        }\n    }\n    \n    bash> mvn clean compile\n    bash> [ERROR] java-demo\\src\\main\\java test\\deng\\FooMain.java:[4,26] process(java.lang.Class<atest.deng.AFoo<?>>) in atest.deng.FooProcessor cannot be applied to (java.lang.Class<atest.deng.Foo>)\n")])])]),o("p",[e._v("Without the "),o("code",[e._v("<T>")]),e._v(" the code won't compile, and yet we are not even using it in this case. How and why "),o("code",[e._v("<T>")]),e._v(" affects the method parameters invocation?")]),e._v(" "),o("p",[e._v("Now, we can improve the "),o("code",[e._v("FooProcessor")]),e._v(" in this way so that the presence of "),o("code",[e._v("<T>")]),e._v(" doesn't have any affect.")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("    package atest.deng;\n    public class FooProcessor {\n        public void process(Class<? extends AFoo<?>> cls) {\n            System.out.println(cls);\n        }\n    }\n")])])]),o("p",[e._v("That's a more proper way to write the generic parameter anyway. But despite a better solution, the puzzle is that the original code compiled under the compiler, but only with the "),o("code",[e._v("<T>")]),e._v(" presented, and yet it's not used. Wouldn't you consider this as a Java compiler bug?")])])}),[],!1,null,null,null);a.default=t.exports}}]);