(window.webpackJsonp=window.webpackJsonp||[]).push([[99],{484:function(e,n,t){"use strict";t.r(n);var a=t(11),i=Object(a.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"how-to-zip-up-a-release-from-a-hg-repository"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#how-to-zip-up-a-release-from-a-hg-repository"}},[e._v("#")]),e._v(" How to zip up a release from a hg repository")]),e._v(" "),t("p",[e._v("Did you know "),t("code",[e._v("hg archive")]),e._v(" command can quickly zip up your project by given a revision or release\nname? This is very handy to package up a distribution and share with other who is refusing to use\nthe same client.")]),e._v(" "),t("p",[e._v("I wrote a simple bash script to do this with couple extras. It will create a zip file with a nice\nbasename so it’s easy for unzipping. It also auto generate and append the given revision or tag\nname into the RELEASE.txt file, so you know what’s been released.")]),e._v(" "),t("p",[e._v("Just add the following file into any root of your "),t("code",[e._v("hg")]),e._v(" based project’s "),t("code",[e._v("bin")]),e._v(" directory and it’s\nready to use.")]),e._v(" "),t("p",[e._v("Note")]),e._v(" "),t("p",[e._v("This script will not tag your repository. It assumed you already have tagged. It simply\nwill package up a release into a nice little zip file.")]),e._v(" "),t("p",[e._v("file: "),t("code",[e._v("bin/zip-release.sh")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('#!/usr/bin/env bash\n#\n# Package a release or snapshot from Hg repository for distribution.\n# :Author: Zemian Deng\n# :date: 2013T00:00:00-05:00\n#\n# Usage example:\n#   # release a specific tag\n#   cd /path/to/project\n#   bin/zip-release.sh 1.0.1\n#\n#   # release a snapshot\n#   bin/zip-release.sh\n#\n\n# Command line arguments and options\n# Assume this script is in bin, which one directory up.\nAPP_HOME=`cd $(dirname $0)/.. && pwd`\nif [[ `command -v realpath` != "" ]]; then\n    # resolve symbolic link if possible.\n    APP_HOME=`realpath $APP_HOME`\nfi\nHG_REVISION=`hg id -i`\nREL_VERSION=$1\nif [[ "$REL_VERSION" == "" ]]; then\n    REL_VERSION=$HG_REVISION\nfi\nREL_NAME="`basename $APP_HOME`-$REL_VERSION"\nREL_DIR=$APP_HOME/target/$REL_NAME\nREL_ZIPFILE=$REL_DIR/../$REL_NAME.zip\n\n# Generate the zip package\nprintf "Generating $REL_NAME in directory=`pwd`\\n"\nmkdir -p $REL_DIR\nhg archive -r $REL_VERSION $REL_ZIPFILE\n\n# Auto append revision id to release file.\nif [[ -e $APP_HOME/RELEASE.txt ]]; then\n    cp $APP_HOME/RELEASE.txt $REL_DIR/RELEASE.txt\nfi\nprintf "$REL_NAME revsion=$HG_REVISION date=`date`\\n" >> $REL_DIR/RELEASE.txt\nzip -u $REL_ZIPFILE $REL_DIR/RELEASE.txt\n\n# Clean up the tmp rel dir.\nrm -r $REL_DIR\n\nprintf "$REL_ZIPFILE created.\\n"\n')])])]),t("p",[e._v("Last updated 2013-06-18 19:18:48 EDT")])])}),[],!1,null,null,null);n.default=i.exports}}]);