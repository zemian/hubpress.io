(window.webpackJsonp=window.webpackJsonp||[]).push([[172],{558:function(a,n,e){"use strict";e.r(n);var t=e(11),r=Object(t.a)({},(function(){var a=this,n=a.$createElement,e=a._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("p",[a._v("If you are not using maven EAR plugin, then you can also use plain maven-war-plugin to package a Skinny war package like this:")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-war-plugin</artifactId>\n                <version>2.6</version>\n                <configuration>\n                    \x3c!--\n                    We want to package skinny war to avoid third party jars --\x3e\n                    <packagingExcludes>\n                        WEB-INF/lib/*.jar\n                    </packagingExcludes>\n                    <archiveClasses>true</archiveClasses>\n                </configuration>\n            </plugin>\n\n")])])]),e("p",[a._v("However, if you ran into the problem I described in "),e("a",{attrs:{href:"http://saltnlight5.blogspot.com/2015/05/getting-version-string-from-maven-based.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("last post"),e("OutboundLink")],1),a._v(", then you want a Skinny war, but still want to include the jar it produced from your own web project. In this case, you can try this:")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-war-plugin</artifactId>\n                <version>2.6</version>\n                <configuration>\n                    \x3c!--\n                    We want to package skinny war to avoid third party jars, but we do want the classes from\n                    this project to be included --\x3e\n                    <packagingExcludes>\n                        %regex[WEB-INF/lib/(?!my-project-artifact-name-.*\\.jar).*\\.jar]\n                    </packagingExcludes>\n                    <archiveClasses>true</archiveClasses>\n                </configuration>\n            </plugin>\n")])])]),e("p",[a._v("The plugin would accept a REGEX expression for exclusion as well, but getting it to work might take you a few tries! If you need more than this, try this online Java REGEX testing tool: "),e("a",{attrs:{href:"http://www.regexplanet.com/advanced/java/index.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("http://www.regexplanet.com/advanced/java/index.html"),e("OutboundLink")],1)])])}),[],!1,null,null,null);n.default=r.exports}}]);