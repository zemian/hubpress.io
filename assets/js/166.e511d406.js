(window.webpackJsonp=window.webpackJsonp||[]).push([[166],{553:function(t,e,n){"use strict";n.r(e);var a=n(11),r=Object(a.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("p",[t._v("Besides writing your own "),n("a",{attrs:{href:"http://saltnlight5.blogspot.com/2015/02/ee-jsp-generating-dynamic-content-with.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Custom Tags in JSP"),n("OutboundLink")],1),t._v(", you will find that Java EE actually provides a set of Java Standard Tag Library (JSTL) ready for you to use. These built-in tags include repeating (for-loop) tags, if condition tags, variable declaration and output tags etc. The Libraries also come with many utility functions and international message formatting tags. Here is an example how it looks like.")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>\n<%@ taglib prefix="x" uri="http://java.sun.com/jsp/jstl/xml" %>\n<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>\n<%@ taglib prefix="sql" uri="http://java.sun.com/jsp/jstl/sql" %>\n<%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions" %>\n<!DOCTYPE html>\n<html>\n    <body>\n        <h1>JSTL Examples</h1>\n        <h2>List of Application Context: ${applicationScope}</h2>\n        <table>\n            <c:forEach var="entry" items="${applicationScope}">\n            <tr>\n                <td>${entry.key}</td>\n                <td>\n                    <c:out value="${entry.value}"/>\n                </td>\n            </tr>\n            </c:forEach>\n        </table>\n        \n        <h2>List of Session Context: ${sessionScope}</h2>\n        <table>\n            <c:forEach var="entry" items="${sessionScope}">\n            <tr>\n                <td>${entry.key}</td>\n                <td>\n                    <c:out value="${entry.value}"/>\n                </td>\n            </tr>\n            </c:forEach>\n        </table>\n        \n        <h2>List of Page Context: ${pageScope}</h2>\n        <table>\n            <c:forEach var="entry" items="${pageScope}">\n            <tr>\n                <td>${entry.key}</td>\n                <td>\n                    <c:out value="${entry.value}"/>\n                </td>\n            </tr>\n            </c:forEach>\n        </table>\n        \n        <h2>List of Request Context: ${requestSope}</h2>\n        <table>\n            <c:forEach var="entry" items="${requestSope}">\n            <tr>\n                <td>${entry.key}</td>\n                <td>\n                    <c:out value="${entry.value}"/>\n                </td>\n            </tr>\n            </c:forEach>\n        </table>\n        \n        <h2>List of Query Parameters: ${param}</h2>\n        <table>\n            <c:forEach var="entry" items="${param}">\n            <tr>\n                <td>${entry.key}</td>\n                <td>\n                    <c:out value="${entry.value}"/>\n                </td>\n            </tr>\n            </c:forEach>\n        </table>\n        \n        <h2>List of Header Parameters: ${header}</h2>\n        <table>\n            <c:forEach var="entry" items="${header}">\n            <tr>\n                <td>${entry.key}</td>\n                <td>\n                    <c:out value="${entry.value}"/>\n                </td>\n            </tr>\n            </c:forEach>\n        </table>        \n        \n        <h2>List of Cookies: ${cookie}</h2>\n        <table>\n            <c:forEach var="entry" items="${cookie}">\n            <tr>\n                <td>${entry.key}</td>\n                <td>\n                    <c:out value="${entry.value}"/>\n                </td>\n            </tr>\n            </c:forEach>\n        </table>\n    </body>\n</html>\n')])])]),n("p",[t._v("I used the core tag here to display map entries of few implicit variables. You may explore more on those tags declarations I have define on top of the example page from the Spec. These code are from the "),n("a",{attrs:{href:"https://github.com/saltnlight5/java-ee6-examples/tree/master/jsp-example",target:"_blank",rel:"noopener noreferrer"}},[t._v("jsp-example"),n("OutboundLink")],1),t._v(" from GitHub.")]),t._v(" "),n("p",[t._v("GLASSFISH NOTE: When deploying above example in GlassFish 3/4, you will run into a NullPointerException and causing the page resulted in error. It turns out that GF server added a internal variable named com.sun.jsp.taglibraryCache  in ServletContext (Application Scope) that throws NPE when its toString() is called! To workaround this, I created "),n("a",{attrs:{href:"https://github.com/saltnlight5/java-ee6-examples/blob/master/jsp-example/src/main/webapp/jstl-example2.jsp",target:"_blank",rel:"noopener noreferrer"}},[t._v("jstl-example2.jsp"),n("OutboundLink")],1),t._v(" that wraps the ${entry.value} into a custom JSTL function so that it guarantees to return an output without throwing exception. So the lesson learned is that you should always return a String and not throw Exception when overriding toString() of a Java class. It's just bad practice.")])])}),[],!1,null,null,null);e.default=r.exports}}]);