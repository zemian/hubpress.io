(window.webpackJsonp=window.webpackJsonp||[]).push([[74],{456:function(e,n,t){"use strict";t.r(n);var a=t(10),s=Object(a.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("When I wrote about how to improve the Java Properties class using "),t("a",{attrs:{href:"http://saltnlight5.blogspot.com/2012/09/improving-javautilproperties.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Props"),t("OutboundLink")],1),e._v(", I've shown\na feature where you can use variable substition such as "),t("code",[e._v("mypath=${user.home}")]),e._v(" in your config file. The implementation underneath it uses the Apache Common Lang library with "),t("code",[e._v("org.apache.commons.lang.text.StrSubstitutor")]),e._v(". There is nothing wrong with this, but I was curious how bad would it be to remove such dependency, so the "),t("code",[e._v("Props")]),e._v(" can be more standalone.")]),e._v(" "),t("p",[e._v("Here is a quick implementation in Groovy, but you should able to translate to Java easily.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    // String variable substitutions\n    def parseVariableNames(String text) {\n        def names = []\n        def pos = 0, max = text.length()\n        while (pos < max) {\n            pos = text.indexOf('${', pos)\n            if (pos == -1)\n                break\n            def end = text.indexOf('}', pos + 2)\n            if (end == -1)\n                break\n            def name = text.substring(pos + 2, end)\n            names.add(name)\n            pos = end + 1\n        }\n        return names\n    }\n    def replaceVariable(String key, String value, String text) {\n        //println \"DEBUG: Replacing '${key}'' with '${value}'\"\n        result = text.replaceAll('\\\\$\\\\{' + key + '}', value)\n        return result\n    }\n")])])]),t("p",[e._v("Probably not the most efficient thing, but it should work. Let's have some tests.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    // Test\n    def map = [\"name\": \"Zemian\", \"id\": \"1001\"]\n    def inputs  = [\n        'Hello ${name}',\n        'My id is ${id}',\n        '${name} is a good programmer.',\n        '${name}\\'s id is ${id}.'\n    ]\n    \n    result = inputs.collect{ line ->\n        def names = parseVariableNames(line)\n        names.each{ key ->\n            line = replaceVariable(key, map.get(key), line) \n        }\n        line\n    }\n    assert result == [\n        'Hello Zemian',\n        'My id is 1001',\n        'Zemian is a good programmer.',\n        'Zemian\\'s id is 1001.'\n    ]\n")])])]),t("p",[e._v("The output should print nothing, as it passed the test. What do you think?")])])}),[],!1,null,null,null);n.default=s.exports}}]);