(window.webpackJsonp=window.webpackJsonp||[]).push([[272],{654:function(t,e,a){"use strict";a.r(e);var n=a(10),s=Object(n.a)({},(function(){var t=this.$createElement,e=this._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[e("p",[this._v("A quick sql table setup to test most common data types.")]),this._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("--\n-- Notes on Oracle Database 12.2\n-- https://docs.oracle.com/en/database/oracle/oracle-database/12.2/administration.html\n\n-- DataTypes\n-- https://docs.oracle.com/en/database/oracle/oracle-database/12.2/sqlrf/Data-Types.html\n\n/*\nCHAR          Fixed length and space padded character string (sql: CHAR)\nVARCHAR2      Variable length character string (sql: VARCHAR)\n              (Oracle discourage use of VARCHAR, even though it's same as VARCHAR2 as of now.)\nNVARCHAR2     Same as VARCHAR2 but with Unicode support\nCLOB          Variable length character large string (sql: TEXT)\n\nNUMBER(p)     Declare integer number (sql: INT)\n\nBINARY_FLOAT  Declare floating-point number (sql: REAL 32 bits)\nBINARY_DOUBLE Declare floating-point number (sql: DOUBLE PRECISION 64 bits)\n\nNUMBER        Declare floating-point number (like NUMERIC with max precision and scale. Values will be stored as exact, not binary.)\nNUMBER(p,s)   Declare fixed-point number (sql: NUMERIC)\n\nDATE          Declare datetime with no sub second precision (note: it includes time!)\nTIMESTAMP     Declare datetime with sub second precision\nTIMESTAMP WITH TIMEZONE\n              Declare datetime with sub second precision and timezone\nINTERVAL YEAR TO MONTH   Declare period of time difference\nINTERVAL DAY TO DECOND   Declare period of time difference\n\nBLOB          Binary data\n */\n\n-- Test table\ncreate table test (\n  id    number(32) generated always as identity primary key,\n  ts    timestamp(6) default systimestamp not null,\n  cat   varchar2(10) not null,\n\n  price    number(19,4) null,\n  qty      int null,\n\n  txtdata  varchar2(1000) null,\n  bindata  blob null,\n\n  distx  binary_float null,\n  disty  binary_double null\n);\ninsert into test(cat, price, qty) values ('test', 100000.10, 50000),\n                                         ('test', 100000.20, 0),\n                                         ('test', 100000.00, 1),\n                                         ('test', 9977000.3333, 179),\n                                         ('test', 104729.1129, 104729);\ninsert into test(cat, bindata, txtdata) values ('test2', hextoraw('CAFEBABE'), 'CAFEBABE');\ninsert into test(cat, bindata) values ('test3', hextoraw(to_char(floor(dbms_random.value(0,256)), 'XX')));\ninsert into test(cat, bindata) values ('test3', hextoraw(to_char(floor(dbms_random.value(0,256)), 'XX')));\ninsert into test(cat, bindata) values ('test3', hextoraw(to_char(floor(dbms_random.value(0,256)), 'XX')));\nupdate test set txtdata = rawtohex(bindata) where cat = 'test3';\ninsert into test(cat, distx, disty) values ('test4', dbms_random.value(0.0, 1.0), dbms_random.value(0.0, 1.0));\ninsert into test(cat, distx, disty) values ('test4', dbms_random.value(0.0, 1.0), dbms_random.value(0.0, 1.0));\ninsert into test(cat, distx, disty) values ('test4', dbms_random.value(0.0, 1.0), dbms_random.value(0.0, 1.0));\nselect sum(price) from test where cat = 'test';\nselect * from test order by cat, ts desc;\n")])])])])}),[],!1,null,null,null);e.default=s.exports}}]);