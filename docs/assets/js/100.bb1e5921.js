(window.webpackJsonp=window.webpackJsonp||[]).push([[100],{482:function(n,e,t){"use strict";t.r(e);var a=t(10),o=Object(a.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h2",{attrs:{id:"how-to-manage-maven-third-party-jars"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#how-to-manage-maven-third-party-jars"}},[n._v("#")]),n._v(" How to manage Maven third party jars")]),n._v(" "),t("p",[n._v("When you find yourself the need to load third party jars into Maven repository,\nthere are few steps you normally do to test it out. You first install them\nlocally into "),t("code",[n._v("$HOME/.m2/repository")]),n._v(", and then create your project pom that\nlist those dependency. When things look good, then you deploy into your own\nhosted repository. The following scripts will help you perform these tasks.")]),n._v(" "),t("p",[n._v("Tip")]),n._v(" "),t("p",[n._v("If you have lot’s of jars under a group, it’s more conveninent to create\nan extra pom that list these dependency and install/deploy it into the repository\nas well. And then your project would only need to include one dependency\nwith "),t("code",[n._v("<type>pom</type>")]),n._v(".")]),n._v(" "),t("p",[n._v("file: "),t("code",[n._v("bin/mvn-install.sh")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('#!/usr/bin/env bash\n#\n# Install local jar files into Maven repository. The artifact name would be same\n# as the filename minus the extension.\n# :Author: Zemian Deng\n# :date: 2013T00:00:00-05:00\n#\n# Usage:\n#   # Print as maven dependency used in pom file\n#   mvn-install.sh mygroup 1.0.0 lib/*.jar\n#\n#   # Install jar files into local maven repo\n#   RUN_TYPE=install mvn-install.sh mygroup 1.0.0 lib/*.jar\n#\n#   # Deploy jar files into remote maven repo\n#   export REPO_URL=http://localhost/nexus/content/repositories/thirdparty\n#   RUN_TYPE=deploy mvn-install.sh mygroup 1.0.0 lib/*.jar\n#\n\n# Capture command arguments and options\nGROUP=$1\nshift\nVERSION=$1\nshift\nFILES="$@"\nif [[ "$GROUP" == "" || "$VERSION" == "" || "$FILES" == "" ]]; then\n printf "ERROR: invalid arguments: GROUP VERSION FILES...\\n"\n exit 1\nfi\n\nRUN_TYPE=${RUN_TYPE:="print"} # values: print|install|deploy\nREPO_ID=${REPO_ID:="nexus-server"} # Id defined in user\'s settings.xml for authentication\nREPO_URL=${REPO_URL:="http://localhost/nexus/content/repositories/thirdparty"}\n\n# For each file, perform action based on run type.\nfor FILE in $FILES; do\n ARTIFACT=`basename $FILE \'.jar\'`\n if [[ "$RUN_TYPE" == "deploy" ]]; then\n  printf "Deploying file=$FILE as artifact=$ARTIFACT to repo=$REPO_URL\\n"\n  mvn deploy:deploy-file \\\n   -DrepositoryId=$REPO_ID -Durl=$REPO_URL \\\n   -DgroupId=$GROUP -DartifactId=$ARTIFACT -Dversion=$VERSION -Dpackaging=jar \\\n   -Dfile=$FILE\n elif [[ "$RUN_TYPE" == "install" ]]; then\n  printf "Installing file=$FILE as artifact=$ARTIFACT\\n"\n  mvn install:install-file \\\n   -DgroupId=$GROUP -DartifactId=$ARTIFACT -Dversion=$VERSION -Dpackaging=jar \\\n   -Dfile=$FILE\n elif [[ "$RUN_TYPE" == "print" ]]; then\n  printf "        <dependency>\\n"\n  printf "            <groupId>$GROUP</groupId>\\n"\n  printf "            <artifactId>$ARTIFACT</artifactId>\\n"\n  printf "            <version>$VERSION</version>\\n"\n  printf "        </dependency>\\n"\n fi\ndone\n')])])]),t("p",[n._v("Last updated 2013-06-18 19:14:37 EDT")])])}),[],!1,null,null,null);e.default=o.exports}}]);