(window.webpackJsonp=window.webpackJsonp||[]).push([[249],{631:function(t,e,n){"use strict";n.r(e);var i=n(10),s=Object(i.a)({},(function(){var t=this.$createElement,e=this._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('import os, sys\nfrom collections import defaultdict\nif len(sys.argv) == 1:\n        path = \'.\'\nelse:\n        path = sys.argv[1]\nprint(f"Inspecting dir: {os.path.abspath(path)}")\ndir_count, file_count, size_count = (0, 0, 0)\nfile_type_counts = defaultdict(lambda: 0)\nfor dirpath, dirnames, filenames in os.walk(path):\n        dir_count += len(dirnames)\n        file_count += len(filenames)\n        for f in filenames:\n                size_count += os.path.getsize(os.path.join(dirpath, f))\n                base, ext = os.path.splitext(f)\n                if ext == \'\':\n                        file_type_counts[base] += 1\n                else:\n                        file_type_counts[ext] += 1\n\n# Sort file_type_counts by value then print\nfile_size = round(size_count / (1024 * 1024))\nprint(f"Total file count: {file_count}")\nprint(f"Total dir size: {file_size} MB")\nprint(f"Total dir count: {dir_count}")\nprint(f"Top 10 file type counts:")\ntop_type_counts = sorted(file_type_counts, key=file_type_counts.get, reverse=True)[:10]\nfor file_type in top_type_counts:\n        type_count = file_type_counts[file_type]\n        percentage = (type_count / file_count)\n        print(f"  {file_type:25} {type_count:<10} {percentage:.1%}")\n')])])])])}),[],!1,null,null,null);e.default=s.exports}}]);