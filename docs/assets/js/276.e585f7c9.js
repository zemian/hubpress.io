(window.webpackJsonp=window.webpackJsonp||[]).push([[276],{658:function(n,e,t){"use strict";t.r(e);var s=t(10),i=Object(s.a)({},(function(){var n=this.$createElement,e=this._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[this._v('# A simple implementation of Ruby\'s String#next() successor method in Python\n# See https://ruby-doc.org/core-2.4.1/String.html#method-i-next\ndef next(id_template, id_chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"):\n        first_ch = id_chars[0]\n        last_ch = id_chars[-1]\n        new_id = list(id_template)\n\n        idx = len(new_id) - 1\n        while idx >= 0:\n                ch = new_id[idx]\n                if ch == last_ch:\n                        new_id[idx] = first_ch\n                else:\n                        next_idx = id_chars.index(ch) + 1\n                        new_id[idx] = id_chars[next_idx]\n                        break\n                idx -= 1\n\n        return \'\'.join(new_id)\n\n# Tests\nimport unittest\nclass StringNextTest(unittest.TestCase):\n        def test_next(self):\n                self.assertEqual(next("0"), "1");\n                self.assertEqual(next("9"), "A");\n                self.assertEqual(next("A"), "B");\n                self.assertEqual(next("Y"), "Z");\n                self.assertEqual(next("Z"), "0");\n\n                self.assertEqual(next("AAA"), "AAB");\n                self.assertEqual(next("AAB"), "AAC");\n                self.assertEqual(next("AAC"), "AAD");\n                self.assertEqual(next("ZZ0"), "ZZ1");\n                self.assertEqual(next("ZZ1"), "ZZ2");\n                self.assertEqual(next("ZZ2"), "ZZ3");\n                self.assertEqual(next("ZZY"), "ZZZ");\n                self.assertEqual(next("ZZZ"), "000");\n                self.assertEqual(next("ZZZZZZ"), "000000");\n                self.assertEqual(next("ZZZZZZZZZ"), "000000000");\n\n                self.assertEqual(next("ABC999GHI"), "ABC999GHJ");\n                self.assertEqual(next("ABC999GZZ"), "ABC999H00");\n\n        def samples(self):\n                id = "ZZX"\n                print(id)\n                for i in range(10):\n                        id = next(id)\n                        print(id)\n\n                id = "FF9"\n                print(id)\n                for i in range(10):\n                        id = next(id, "0123456789ABCDEF")\n                        print(id)\n\nif __name__ == \'__main__\':\n        #StringNextTest().samples()\n        unittest.main()\n')])])])])}),[],!1,null,null,null);e.default=i.exports}}]);