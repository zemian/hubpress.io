(window.webpackJsonp=window.webpackJsonp||[]).push([[262],{643:function(n,a,e){"use strict";e.r(a);var t=e(10),i=Object(t.a)({},(function(){var n=this,a=n.$createElement,e=n._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("p",[n._v("Vagrant is a great tool to automate and setup VMs. Here is a config file\nthat can setup multiple VMs in your own PC to simulate a\ncontroller(admin), db, and app servers farm env. I will setup so that\nitâ€™s ready to install Ansible in a the control server, and ensure all\nother servers is accessible by a private virtual IP with default python\nexecutable.")]),n._v(" "),e("ol",[e("li",[e("p",[n._v("Install VirtualBox and Vagrant in your development PC. (These two\nrequires elevated admin rights!)")])]),n._v(" "),e("li",[e("p",[n._v("Now as normal user open a terminal and run the following:")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("$ mkdir vm-serversfarm\n$ vagrant init ubuntu/xenial64\n")])])])])]),n._v(" "),e("p",[n._v("Now edit "),e("code",[n._v("Vagrantfile")]),n._v(" with the following:")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v('# This file is to setup Ubuntu VM servers\nVagrant.configure("2") do |config|\n  vm_box = "ubuntu/xenial64"\n  config.vm.define "admin" do |admin|\n    admin.vm.box = vm_box\n    admin.vm.hostname = \'ubuntu-xenial-admin\'\n    admin.vm.network "private_network", ip: "192.168.56.200"\n    admin.vm.provision "shell", privileged: false,\n      inline: <<-SCRIPT_DOC\n        ssh-keygen -f ~vagrant/.ssh/id_rsa -t rsa -N \'\'\n        cp -v ~vagrant/.ssh/id_rsa.pub /vagrant/admin_id_rsa.pub\n      SCRIPT_DOC\n    admin.vm.provision "shell",\n      inline: <<-SCRIPT_DOC\n        apt-get update\n        apt-get install -y ansible\n      SCRIPT_DOC\n  end\n\n  config.vm.define "db1" do |db1|\n    db1.vm.box = vm_box\n    db1.vm.hostname = \'ubuntu-xenial-db1\'\n    db1.vm.network "private_network", ip: "192.168.56.211"\n    db1.vm.provision "shell", inline: "cat /vagrant/admin_id_rsa.pub >> ~vagrant/.ssh/authorized_keys"\n    db1.vm.provision "shell",\n      inline: <<-SCRIPT_DOC\n        #apt-get update\n        apt-get install -y python\n        apt-get install -y postgresql\n      SCRIPT_DOC\n  end\n\n  config.vm.define "app1" do |app1|\n    app1.vm.box = vm_box\n    app1.vm.hostname = \'ubuntu-xenial-app1\'\n    app1.vm.network "private_network", ip: "192.168.56.221"\n    app1.vm.provision "shell", inline: "cat /vagrant/admin_id_rsa.pub >> ~vagrant/.ssh/authorized_keys"\n    app1.vm.provision "shell",\n      inline: <<-SCRIPT_DOC\n        #apt-get update\n        apt-get install -y python\n      SCRIPT_DOC\n  end\n\n  config.vm.define "app2" do |app2|\n    app2.vm.box = vm_box\n    app2.vm.hostname = \'ubuntu-xenial-app2\'\n    app2.vm.network "private_network", ip: "192.168.56.222"\n    app2.vm.provision "shell", inline: "cat /vagrant/admin_id_rsa.pub >> ~vagrant/.ssh/authorized_keys"\n    app2.vm.provision "shell",\n      inline: <<-SCRIPT_DOC\n        #apt-get update\n        apt-get install -y python\n      SCRIPT_DOC\n  end\nend\n')])])]),e("p",[n._v("Now you can bring them up by running just this command:")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("$ vagrant up\n")])])]),e("p",[n._v("When all is done, you may ssh into any box by their name like this")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("$ vagrant ssh admin\n$ # Or any of other boxes: db1, app1, app2\n")])])]),e("h1",{attrs:{id:"using-centos-vms"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#using-centos-vms"}},[n._v("#")]),n._v(" Using CentOS VMs")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v('# This file is to setup CentOS VM servers\nVagrant.configure("2") do |config|\n  vm_box = "generic/centos7"\n\n  # Server app1 is the admin server. We will also host the DB server here.\n  config.vm.define "app1" do |app1|\n    app1.vm.box = vm_box\n    app1.vm.hostname = \'app1\'\n    app1.vm.network "private_network", ip: "192.168.56.201"\n    app1.vm.synced_folder ".", "/vagrant_data"\n    app1.vm.provision "shell", inline: <<-SCRIPT_DOC\n      yum install -y python-virtualenv python36 ansible postgresql\n    SCRIPT_DOC\n    app1.vm.provision "shell", privileged: false, inline: <<-SCRIPT_DOC\n      ssh-keygen -f ~vagrant/.ssh/id_rsa -t rsa -N \'\'\n      cp -v ~vagrant/.ssh/id_rsa.pub /vagrant_data/app1_id_rsa.pub\n    SCRIPT_DOC\n  end\n\n  # Server app2 is a application workhorse server\n  config.vm.define "app2" do |app2|\n    app2.vm.box = vm_box\n    app2.vm.hostname = \'app2\'\n    app2.vm.network "private_network", ip: "192.168.56.202"\n    app2.vm.synced_folder ".", "/vagrant_data"\n    app2.vm.provision "shell", inline: <<-SCRIPT_DOC\n      yum install -y python36\n    SCRIPT_DOC\n    app2.vm.provision "shell", privileged: false, inline: <<-SCRIPT_DOC\n      cat /vagrant_data/app1_id_rsa.pub >> ~vagrant/.ssh/authorized_keys\n      chmod 600 ~vagrant/.ssh/authorized_keys\n      chmod 700 ~vagrant/.ssh\n    SCRIPT_DOC\n  end\n\n  # Server app3 is a application workhorse server\n  config.vm.define "app3" do |app3|\n    app3.vm.box = vm_box\n    app3.vm.hostname = \'app3\'\n    app3.vm.network "private_network", ip: "192.168.56.203"\n    app3.vm.synced_folder ".", "/vagrant_data"\n    app3.vm.provision "shell", inline: <<-SCRIPT_DOC\n      yum install -y python36\n    SCRIPT_DOC\n    app3.vm.provision "shell", privileged: false, inline: <<-SCRIPT_DOC\n      cat /vagrant_data/app1_id_rsa.pub >> ~vagrant/.ssh/authorized_keys\n      chmod 600 ~vagrant/.ssh/authorized_keys\n      chmod 700 ~vagrant/.ssh\n    SCRIPT_DOC\n  end\nend\n')])])])])}),[],!1,null,null,null);a.default=i.exports}}]);