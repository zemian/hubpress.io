(window.webpackJsonp=window.webpackJsonp||[]).push([[63],{446:function(e,a,t){"use strict";t.r(a);var r=t(10),s=Object(r.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("The Java built-in "),t("code",[e._v("java.util.Properties")]),e._v(" class could really use some love. I have written a slightly improved version called\n"),t("a",{attrs:{href:"https://bitbucket.org/timemachine/scheduler/src/15f066cc6dad/timemachine-scheduler/src/main/java/timemachine/scheduler/support/Props.java",target:"_blank",rel:"noopener noreferrer"}},[e._v("timemachine.scheduler.support.Props"),t("OutboundLink")],1),e._v(", and below are some features that I use often.")]),e._v(" "),t("h1",{attrs:{id:"you-can-use-it-as-a-string-map-of-properties"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#you-can-use-it-as-a-string-map-of-properties"}},[e._v("#")]),e._v(' You can use it as a "String Map" of properties')]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('    Props props1 = new Props();\n    props1.put("foo", "bar");\n    \n    // It can load from/to the Java Properties\n    Props props2 = new Props(System.getProperties());\n    java.util.Properties javaProps = props3.toProperties();\n    \n    // It can load from/to a basic java.util.Map\n    Props props3 = new Props(System.getenv());\n    \n    // Props is a HashMap<String, String>, so no need to convert. Just use it\n    for(Map.Entry<String, String> entry : props3.entrySet())\n        System.our.println(entry.getKey() + ": " + entry.getValue());\n')])])]),t("h1",{attrs:{id:"you-can-load-from-a-file-in-a-single-line"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#you-can-load-from-a-file-in-a-single-line"}},[e._v("#")]),e._v(" You can load from a file in a single line")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('    Props props1 = new Props("config.properties");\n    Props props2 = new Props("/path/to/config.properties");\n    Props props3 = new Props(new java.net.URL("http://myhost/config/config.properties"));\n    Props props4 = new Props(ClasspathURLStreamHandler.createURL("classpath://config/config.properties"));\n    \n    // You can re-load on top of existing instance to override values\n    props4.load("config2.properties");\n')])])]),t("p",[e._v("NOTE: The "),t("code",[e._v("ClasspathURLStreamHandler")]),e._v(" is a utility class from the same package under "),t("code",[e._v("timemachine.scheduler.support")]),e._v(" that can load any resources that's in the classpath.")]),e._v(" "),t("h1",{attrs:{id:"you-can-get-many-basic-types-conversion"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#you-can-get-many-basic-types-conversion"}},[e._v("#")]),e._v(" You can get many basic types conversion")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('    Props props = new Props();\n    props.put("str", "foo");\n    props.put("num", "123");\n    props.put("dec", "99.99");\n    props.put("flag", "true");\n    \n    String str = props.getString("str");\n    int num = props.getInt("num");\n    double dec = props.getDouble("dec");\n    boolean flag = props.getBoolean("flag");\n    \n    // You can even get default value when key is not found too\n    int num2 = props.getInt("num2", -1);\n')])])]),t("h1",{attrs:{id:"you-can-auto-expand-variable-from-any-existing-properties"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#you-can-auto-expand-variable-from-any-existing-properties"}},[e._v("#")]),e._v(" You can auto expand ${variable} from any existing properties")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('    Props props = new Props(System.getProperties());\n    props.put("configDir", "${user.home}/myapp/config");\n    props.expandVariables();\n    \n    // The ${user.home} should be expanded to actual user home dir value.\n    File dir = new File(props.get("configDir"));\n')])])]),t("p",[e._v("There you have it. You see more code than words in this post, but I believe simple code speak louder than words and docs. I find these features very convenient and practical\nfor many Java applications to use. I wish the JDK would provide these out of the box, and make the "),t("code",[e._v("java.util.Properties")]),e._v(" more\ndeveloper friendly.")])])}),[],!1,null,null,null);a.default=s.exports}}]);