(window.webpackJsonp=window.webpackJsonp||[]).push([[270],{652:function(n,t,e){"use strict";e.r(t);var i=e(10),r=Object(i.a)({},(function(){var n=this.$createElement,t=this._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[this._v('package com.zemian.hellojava;\n\nimport java.util.*;\n\n/**\n * A simple command line arguments and options parser in the format of "--optionName=optionValue" or\n * "-optionName=optionValue".\n *\n * The optionName can be one ore more characters. The equals sign must be used when providing optionValue;\n * else it will be treated as program arguments instead! If you ommit the "=optionValue" part, then it\n * will default to "=true" for that optionName. The optionValue must be a single string. Any other argument\n * that are not part of options are store in a new args list.\n *\n * The constructor will immediately parse the input arguments, and it should not throw any exceptions. In case\n * user did not use correct format, by above rule, it will go into the argument list instead. We purposely made\n * this class simple, and let end user to perform any validation they need for their program.\n *\n * Usage example:\n *   Hello --help\n *   Hello --num=101 --verbose one two three\n * ----\n * public class Hello {}\n *     public static void main(String[] args) {\n *         CmdOpts opts = new CmdOpts(args);\n *         if (opts.hasOpt("help"))\n *           System.out.println("You need help");\n *         int num = opts.getIntOpt("num", 0);\n *         System.out.println("Using num=" + num);\n *         System.out.println("Using new args=" + opts.getArgs());\n *     }\n * }\n * ----\n *\n * Created by Zemian Deng 2017.\n */\npublic class CmdOpts {\n    private Map<String, Object> opts = new HashMap<>();\n    private List<String> args = new ArrayList<>();\n\n    public CmdOpts(String[] arguments) {\n        parse(arguments);\n    }\n\n    private void parse(String[] arguments) {\n        for (String arg : arguments) {\n            if (arg.startsWith("--")) {\n                addOpt(arg.substring(2));\n            } else if (arg.startsWith("-")) {\n                addOpt(arg.substring(1));\n            } else {\n                args.add(arg);\n            }\n\n        }\n    }\n\n    private void addOpt(String option) {\n        if (option != null && !"".equals(option)) {\n            String[] options = option.split("=", 2);\n            String optionName = options[0];\n            String optionValue = "true";\n            if (options.length == 2) {\n                optionValue = options[1];\n            }\n\n            Object existingOpt = opts.get(optionName);\n            if (existingOpt == null) {\n                opts.put(optionName, optionValue);\n            } else {\n                // Support multi options with same key\n                if (existingOpt instanceof List) {\n                    // Third + items\n                    ((List<String>) existingOpt).add(optionValue);\n                } else {\n                    // Second items\n                    List<String> list = new ArrayList<>();\n                    list.add((String) existingOpt);\n                    list.add(optionValue);\n                    opts.put(optionName, list);\n                }\n            }\n        }\n    }\n\n    public int getOptsSize() {\n        return opts.size();\n    }\n\n    public Set<String> getOptsNames() {\n        return opts.keySet();\n    }\n\n    public boolean hasOpt(String name) {\n        return opts.containsKey(name);\n    }\n\n    public Map<String, Object> getOpts() {\n        return opts;\n    }\n\n    public void setOpts(Map<String, Object> opts) {\n        this.opts = opts;\n    }\n\n    public String getOpt(String name) {\n        return (String) opts.get(name);\n    }\n\n    public String getOpt(String name, String def) {\n        String result = getOpt(name);\n        if (result == null)\n            result = def;\n        return result;\n    }\n\n    public boolean getBooleanOpt(String name) {\n        if (hasOpt(name)) {\n            return true;\n        }\n        return Boolean.parseBoolean(getOpt(name));\n    }\n\n    public boolean getBooleanOpt(String name, boolean def) {\n        if (hasOpt(name)) {\n            return true;\n        }\n        String result = getOpt(name);\n        if (result == null)\n            return def;\n        return Boolean.parseBoolean(result);\n    }\n\n    public int getIntOpt(String name) {\n        return Integer.parseInt(getOpt(name));\n    }\n\n    public int getIntOpt(String name, int def) {\n        String result = getOpt(name);\n        if (result == null)\n            return def;\n        return Integer.parseInt(result);\n    }\n\n    public long getLongOpt(String name) {\n        return Long.parseLong(getOpt(name));\n    }\n\n    public long getLongOpt(String name, long def) {\n        String result = getOpt(name);\n        if (result == null)\n            return def;\n        return Long.parseLong(result);\n    }\n\n    public List<String> getMultiOpts(String name) {\n        List<String> list = new ArrayList<>();\n        Object optVal = opts.get(name);\n        if (optVal == null) {\n            return list;\n        } else if (optVal instanceof String) {\n            list.add((String) optVal);\n            return list;\n        }\n\n        list.addAll((List<String>) optVal);\n        return list;\n    }\n\n    public int getArgsSize() {\n        return args.size();\n    }\n    public List<String> getArgs() {\n        return args;\n    }\n    public String[] getArgsArray() {\n        return args.toArray(new String[args.size()]);\n    }\n\n    public String getArgOrError(int index, String errorIfMissing) {\n        if (index >= args.size() || index < 0) {\n            throw new IllegalArgumentException(errorIfMissing);\n        }\n        return args.get(index);\n    }\n\n    public String getArg(int index) {\n        return args.get(index);\n    }\n\n    /** A test class to try out CmdOpts. */\n    public static void main(String[] args) {\n        CmdOpts opts = new CmdOpts(args);\n        if (opts.hasOpt("help"))\n            System.out.println("You need help");\n        int num = opts.getIntOpt("num", 0);\n        System.out.println("Using num=" + num);\n        System.out.println("Using new args=" + opts.getArgs());\n    }\n}\n')])])])])}),[],!1,null,null,null);t.default=r.exports}}]);